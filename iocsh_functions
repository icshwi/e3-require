# -*- mode: sh -*-

ROOT_UID=0 
E_NOTROOT=101
EXIST=1
NON_EXIST=0

function pushd { builtin pushd "$@" > /dev/null; }
function popd  { builtin popd  "$@" > /dev/null; }

function checkIfRoot
{
    if [[ $(id -u) -ne "$ROOT_UID" ]] ; then 
	echo "Please run it as root or with sudo" ; 
	exit $E_NOTROOT ;
    fi
};


function checkIfDir
{
    
    local dir=$1
    local result=""
    if [ ! -d "$dir" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"
};


function checkIfFile
{
    local file=$1
    local result=""
    if [ ! -e "$file" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"	 
};


function checkIfVar
{
    local var=$1
    local result=""
    if [ -z "$var" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"	 
};


function subst
{
    subst=""
    while [ "$#" -gt 1 ]
    do
        case $2 in 
            *=* )
		subst="$subst,$2"; shift
		;;
            * )
		break
		;;
        esac
    done
    echo ${subst#,}
};


function select_epics_base
{
    local base_version=$1;
    local epics_base="";
    epics_base=${EPICS}/base-${base_version#-};
    echo ${epics_base};
};


function version
{
    printf "%s : %s%s\n" "European Spallation Source ERIC" "$SC_SCRIPTNAME" ${SC_VERSION:+" ($SC_VERSION)"}  >&2
    exit
};


function printParamShow
{
    declare -a var_list=();
    var_list+=(EPICS_CA_REPEATER_PORT);
    var_list+=(EPICS_CA_SERVER_PORT);
    var_list+=(EPICS_TIMEZONE);
    var_list+=(EPICS_TS_NTP_INET);
    var_list+=(EPICS_AR_PORT);

    for var in ${var_list[@]};  do
	printf "# $var=\"${!var}\"\n"
    done
    printf "#\n";
};

function printIocEnv
{
    declare -a var_list=();
    var_list+=(HOSTDISPLAY);
    var_list+=(WINDOWID);
    var_list+=(PWD);
    var_list+=(USER);
    var_list+=(LOGNAME);
    var_list+=(EPICS_HOST_ARCH);
    var_list+=(EPICS_BASE);
    var_list+=(EPICS_LOCATION);
    var_list+=(EPICS);
    var_list+=(ESS_EPICS_PATH);
    var_list+=(REQUIRE);
    var_list+=(REQUIRE_VERSION);
    var_list+=(REQUIRE_BIN);
    var_list+=(REQUIRE_LIB);
    var_list+=(REQUIRE_DBD);
    var_list+=(EPICS_CA_AUTO_ADDR_LIST);
    var_list+=(EPICS_CA_ADDR_LIST);
    var_list+=(PATH);
    var_list+=(LD_LIBRARY_PATH);
    
    printf "#\n";
    printf "# Start at \"$(date +%Y-W%V-%b%d-%H%M-%S-%Z)\"\n"
    printf "#\n";
    printf "# Version information:\n";
    printf "# %s : %s%s\n" "European Spallation Source ERIC" "$SC_SCRIPTNAME" ${SC_VERSION:+" ($SC_VERSION)"};
    printf "## can you see this?\n";
    printf "#\n";
     
    
    for var in ${var_list[@]};  do
	printf "# $var=\"${!var}\"\n"
    done
    
    printf "#\n";
    printf "# Please Use Version and other environment variables\n";
    printf "# in order to report or debug this shell\n";
    printf "#\n";
};


# Ctrl+c : OK
# exit   : OK
# kill softioc process : OK
# kill main precess : Enter twice in terminal,
#                     close softIoc, but STATUP file is remained.
#                     


function softIoc_end
{
    local startup_file=$1
    rm -f ${startup_file};
    stty sane;
    exit;
};


function die #@ Print error message and exit with error code
{
    #@ USAGE: die [errno [message]]
    error=${1:-1}
    ## exits with 1 if error number not given
    shift
    [ -n "$*" ] &&
	printf "%s%s: %s\n" "$SC_SCRIPTNAME" ${SC_VERSION:+" ($SC_VERSION)"} "$*" >&2
    exit "$error"
};


function iocsh_ps1
{
    local iocsh_ps1="";
    local hash=$1;
    local pid=$2;
 
    iocsh_ps1+=$hash;
    iocsh_ps1+=".";
    iocsh_ps1+=$(hostname|tr -d '\r');
    iocsh_ps1+=".";
    iocsh_ps1+=$pid;
    iocsh_ps1+=" > ";
    echo "${iocsh_ps1}"
};


function loadRequire
{
    local libPrefix=lib
    local libPostfix=.so
    local libName=${libPrefix}${REQUIRE}${libPostfix}
    
    local require_lib=${REQUIRE_LIB}/${EPICS_HOST_ARCH}/${libName}
    local require_dbd=${REQUIRE_DBD}/${REQUIRE}.dbd
    
    local load_cmd="dlload"

    printf "# Loading the mandatory require module ... \n"
    printf "# \n";
    printf "${load_cmd} ${require_lib}\n";
    printf "dbLoadDatabase ${require_dbd}\n"
    printf "${REQUIRE%-*}_registerRecordDeviceDriver\n\n"
    printf "# \n";
    printf "# \n";
 
};



function check_mandatory_env_settings 
{
    declare -a var_list=();
    var_list+=(EPICS_HOST_ARCH);
    var_list+=(ESS_EPICS_PATH);
    var_list+=(EPICS);
#    var_list+=(EPICS_MODULES);
    var_list+=(EPICS_BASE);
    var_list+=(REQUIRE);
    var_list+=(REQUIRE_BIN);
    var_list+=(REQUIRE_LIB);
    var_list+=(REQUIRE_DBD);
    var_list+=(REQUIRE_VERSION);
    for var in ${var_list[@]};  do
	if [[ $(checkIfVar ${!var}) -eq "$NON_EXIST" ]]; then
	    die 1 " $var is not defined!. Please source e3-env/setE3Env.bash."
	fi
    done
};



function loadFiles 
{
    while [ "$#" -gt 0 ]; do
	file=$1
	case $file in
	    -h | "-?" | -help | --help )
		help
		;; 
	    -v | -ver | --ver | -version | --version )
		version
		;;
	    @* )              
		loadFiles $(cat ${file#@})
		;;
	    *.db | *.template)
	    	subst=""
	    	while [ "$#" -gt 1 ]; do
	    	    case $2 in 
	    		*=* )
	    		    subst="$subst,$2"; shift
	    		    ;;
	    		* )
	    		    break
	    		    ;;
	    	    esac
	    	done
	    	echo "dbLoadRecords \"$file\",\"${subst#,}\""
	    	;;
	    *.subs | *.subst )
	    	echo "dbLoadTemplate \"$file\""
	    	;;
	    *.dbd )
	    	# some dbd files must be loaded before main to take effect
	    	echo "dbLoadDatabase \"$file\",\"$DBD\""
	    	;;
	    *.so )             
	    	if [ $BASEMINOR -ge 15 -o $BASEPATCH -ge 12 ]; then
	    	    echo "dlload \"$file\""
	    	else
	    	    echo "ld \"$file\""
	    	fi
	    	;;
	    -c )               
	    	shift
	    	case $1 in
	    	    seq* )
	    		if [ "$init" != NO ]; then
	    		    echo "iocInit"
	    		    init=NO
	    		fi
	    		;;
	    	    iocInit )
	    		init=NO
	    		;;
	    	esac
	    	echo $1
	    	;;
	    -s )
	    	shift
	    	if [ "$init" != NO ]; then
	    	    echo "iocInit"
	    	    init=NO
	    	fi
	    	echo "seq $1"
	    	;;
	    -r )               
	    	shift
	    	echo "require $1"
	    	;;
	    -n )
	    	shift
	    	IOC="$1"
	    	;;
	    -* )
	    	{
	    	    echo "unknown option $1"
	    	    echo "try: $(basename $0) --help"
	    	} >&2
	    	exit 1
	     	;;
	    * )                
	    	echo "< \"$file\""
	    	if grep -q iocInit $file; then init=NO; fi
	    	;;
	esac
	shift
    done
};


function help
{
    {
	printf "USAGE: iocsh.bash [startup files]"
	printf "Start an ESS EPICS iocsh.bash and load startup scripts"
    } >&2
    exit
}
