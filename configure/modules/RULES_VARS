# -*- mode: Makefile;-*-

E3_MODULES_VARIABLES:=$(sort $(filter-out $(VARS_EXCLUDES) VARS_EXCLUDES,$(.VARIABLES)))

DEP_MODULES:=$(filter %_DEP_VERSION, $(E3_MODULES_VARIABLES))
#LOWER_DEP_MODULES:=$(shell echo $(DEP_MODULES) | tr A-Z a-z)
#DEP_MODULES_NAME:=$(subst _DEP_VERSION, "", $(DEP_MODULES))



LEVEL?=2

GENERATED_DEP_FILE:=$(E3_MODULES_INSTALL_LOCATION_LIB)/$(EPICS_HOST_ARCH)/$(E3_MODULE_NAME).dep

.PHONY: env vars header dep _dep1 _dep2

## Print interesting VARIABLES
env: vars

vars: header
	$(foreach v, $(E3_MODULES_VARIABLES), $(info $(v) = $($(v)))) @#noop

header:
	$(QUIET)echo ""
	$(QUIET)echo "------------------------------------------------------------"
	$(QUIET)echo ">>>>     Current EPICS and E3 Environment Variables     <<<<"
	$(QUIET)echo "------------------------------------------------------------"
	$(QUIET)echo ""


existent:
ifeq (, $(shell which tree))
	$(QUIET)ls -d $(E3_MODULES_PATH)/$(E3_MODULE_NAME)
	$(QUIET)find $(E3_MODULES_PATH)/$(E3_MODULE_NAME)/ -maxdepth $(LEVEL) | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/:---\1/"
else
	$(QUIET)tree -L $(LEVEL) $(E3_MODULES_PATH)/$(E3_MODULE_NAME)
endif

cellvars: vars

dep: _dep2
ifneq ("$(wildcard $(GENERATED_DEP_FILE))","")
	$(QUIET)echo "> generated ..."
	$(QUIET)tail -n+2 $(GENERATED_DEP_FILE) 
endif

_dep2: _dep1
	$(foreach v, $(DEP_MODULES), $(info $(v) = $($(v)))) @#noop
_dep1:
	$(QUIET)echo "require $(E3_MODULE_NAME),$(E3_MODULE_VERSION)"
	$(QUIET)echo "< configured ..."

vers:
	$(QUIET)echo "EPICS_MODULE_TAG:=$(EPICS_MODULE_TAG)"
	$(QUIET)echo "E3_MODULE_VERSION:=$(E3_MODULE_VERSION)"



### The following dependency plot generator rules do NOT cover all
### dependency information, BUT cover only within this module. 
DEP0:=$(patsubst %_DEP_VERSION,%,$(DEP_MODULES))

define generate_gv_file
$(QUIET)printf "digraph $(E3_MODULE_NAME) {\n" > $@
$(QUIET)printf "node [shape=record];\n" >> $@
$(QUIET)printf "base [label=\"base $(EPICS_VERSION_NUMBER)\"]\n" >> $@
$(QUIET)printf "$(E3_REQUIRE_NAME) [label=\"$(E3_REQUIRE_NAME) $(E3_REQUIRE_VERSION)\"]\n" >> $@
$(foreach v, $(DEP0), $(QUIET)echo "$(v) [label=\"$(v) $($(v)_DEP_VERSION)\"]">> $@ )
$(QUIET)printf "$(E3_MODULE_NAME) [label=\"$(E3_MODULE_NAME) $(E3_MODULE_VERSION)\"]\n" >> $@
$(QUIET)printf "base -> $(E3_REQUIRE_NAME) "  >> $@
## From this point, we have to think how we handle other dependency out of this repository
## by using rank, subgraph, and so on later.
## Tuesday, September 10 12:49:41 CEST 2019, han.lee@esss.se
## https://renenyffenegger.ch/notes/tools/Graphviz/examples/index
$(foreach v, $(DEP0), $(QUIET)echo -n "-> $(v)" >> $@ )
##
$(QUIET)echo " -> $(E3_MODULE_NAME)">> $@
$(QUIET)printf "}\n" >> $@
endef


define print_gv_file
$(QUIET)printf "digraph $(E3_MODULE_NAME) {\n"
$(QUIET)printf "node [shape=record];\n"
$(QUIET)printf "base [label=\"base $(EPICS_VERSION_NUMBER)\"]\n" 
$(QUIET)printf "$(E3_REQUIRE_NAME) [label=\"$(E3_REQUIRE_NAME) $(E3_REQUIRE_VERSION)\"]\n"
$(foreach v, $(DEP0), $(QUIET)echo "$(v) [label=\"$(v) $($(v)_DEP_VERSION)\"]" )
$(QUIET)printf "$(E3_MODULE_NAME) [label=\"$(E3_MODULE_NAME) $(E3_MODULE_VERSION)\"]\n" 
$(QUIET)printf "base -> $(E3_REQUIRE_NAME) " 
$(foreach v, $(DEP0), $(QUIET)echo -n "-> $(v)"  )
$(QUIET)echo " -> $(E3_MODULE_NAME)"
$(QUIET)printf "}\n\n"
endef

.PHONY: plotdep $(E3_MODULE_NAME).gv showgv

FILETYPE?=svg

plotdep: $(E3_MODULE_NAME).gv
	dot -T$(FILETYPE) $@ -o $(E3_MODULE_NAME).$(FILETYPE)
	display $(E3_MODULE_NAME).png&

$(E3_MODULE_NAME).gv:
	$(generate_gv_file)

showgv:
	$(QUIET)echo "*** Warning this output isn't 100% correct. Please look at them carefully! *** \n"
	$(print_gv_file)

.DELETE_ON_ERROR:
